<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2023/01/30/redis/"/>
    <url>/2023/01/30/redis/</url>
    
    <content type="html"><![CDATA[<ol><li>基础与协议<br>  Redis是一种常用来做缓存的工具，遵循BSD协议。BSD协议是五大开源协议的一种，它允许使用者在使用产品的基础上，可以对源代码进行修改和重新发布，并且可以发布为商业软件。需要注意的是，要在源代码中保留原来代码中的BSD协议，且不可以源代码的作者、机构或原产品名字做市场推广。</li></ol><p>内存数据库<br>Redis是一个key-value型的数据库（相比较之下，MySQL是关联数据库），也就是说，一个key对应一个value，这是保证高效的手段之一。另外，Redis的所有数据在使用时都存放在内存中。这包含了两层含义：1．单台Redis能存放多少数据，取决于其内存的大小（假设所有内存都给Redis用）。如果需要存放更多数据，可以增加内存或做集群。2．Redis支持将数据持久化到磁盘中。但是，不会直接对磁盘进行读写。这种持久化，一般是用于在服务器重启时，先把数据持久化，重启后再从磁盘中读取到内存。</p><p>数据结构<br>Redis支持五种数据结构，分别是String，List，Hash，Set，Zset。即字符串，列表，哈希，集合，有序集合。</p><p>String是Redis最基本的类型，一个key对应一个value。一般情况下，大部分的内容都可以通过序列化后，再存在到Redis中，比如图片或对象等。每个key对就的value存储的内容最大为512M。</p><p>Hash即哈希表，即key-value对集合。是不是很奇怪？Redis的数据本身不就是key-value型的吗？其实不奇怪。我们这里在说数据结构的时候，单指的是key-value中的value。也就是说，value是一个key-value对集合。想象一下这种数据结构，特别适合存储对象。并且，Redis支持像数据库中update一样，单独修改对象的某个属性。</p><p>List即列表。value是一个字符串的列表。也就是说，一个value可以存放多个字符串，可以按照顺序，添加到头或尾。它就是一个双向链表。很适合做如朋友圈动态列表或消息队列等。</p><p>Set即集合。它的value和列表的value一样，也是一个字符串列表，只是Set是无序的，并且，value中的元素是不重复的。和Java中的Set差不多，它的基础原理也是基于Hash实现的，所以添加、删除、查找等的效率等都很快。Redis还为Set提供了多个集合操作的API，如交集、并集、差集等。可以利用来做统计，有多少个共同好友等。</p><p>Zset即有序集合。它在Set的基础上，给value中的每个字符串关联了一个score属性，即得分。Zset通过计算得分，将字符串进行从小到大的排序。字符串的得分可以相同。Zset的排序是在插入时直接就做好的。可以用来做排行榜等。</p><ol start="2"><li>Redis常出现的应用场景<br>  缓存——热数据<br>  热点数据（经常会被查询，但是不经常被修改或者删除的数据），首选是使用redis缓存，毕竟强大到冒泡的QPS和极强的稳定性不是所有类似工具都有的，而且相比于memcached还提供了丰富的数据类型可以使用，另外，内存中的数据也提供了AOF和RDB等持久化机制可以选择，要冷、热的还是忽冷忽热的都可选。</li></ol><p>结合具体应用需要注意一下：很多人用spring的AOP来构建redis缓存的自动生产和清除，过程一般如下：step1-&gt; Select 数据库前查询redis，有的话使用redis数据，放弃select 数据库，没有就select 数据库，然后将数据插入redis; srep2-&gt; update或者delete数据库钱，查询redis是否存在该数据，存在的话先删除redis中数据，然后再update或者delete数据库中的数据。 这种操作，如果并发量很小的情况下基本没问题，但是高并发的情况请注意下面场景：</p><p>为了update先删掉了redis中的该数据，这时候另一个线程执行查询，发现redis中没有，瞬间执行了查询SQL，并且插入到redis中一条数据，回到刚才那个update语句，这个悲催的线程压根不知道刚才那个该死的select线程犯了一个弥天大错！于是这个redis中的错误数据就永远的存在了下去，直到下一个update或者delete。</p><p>计数器<br>诸如统计点击数等应用。由于单线程，可以避免并发问题，保证不会出错，而且100%毫秒级性能。</p><p>队列<br>相当于消息系统，与ActiveMQ，RocketMQ等工具类似，但是觉得简单用一下还行，如果对于数据一致性要求高的话还是用RocketMQ等专业系统。由于redis把数据添加到队列是返回添加元素在队列的第几位，所以可以做判断用户是第几个访问这种业务。队列不仅可以把并发请求变成串行，并且还可以做队列或者栈使用。</p><p>位操作（大数据处理）<br>用于数据量上亿的场景下，例如几亿用户系统的签到，去重登录次数统计，某用户是否在线状态等等。腾讯10亿用户，要几个毫秒内查询到某个用户是否在线，能怎么做？千万别说给每个用户建立一个key，然后挨个记（你可以算一下需要的内存会很恐怖，而且这种类似的需求很多。这里要用到位操作——使用setbit、getbit、bitcount命令。原理是：</p><p>redis内构建一个足够长的数组，每个数组元素只能是0和1两个值，然后这个数组的下标index用来表示用户id（必须是数字哈），那么很显然，这个几亿长的大数组就能通过下标和元素值（0和1）来构建一个记忆系统。</p><p>最新列表<br>例如新闻列表页面的最新的新闻列表，如果总数量很大的情况下，尽量不要使用select a from A limit 10这种low货，尝试redis的 LPUSH命令构建List，一个个顺序都塞进去就可以啦。不过万一内存清掉了咋办？也简单，查询不到存储key的话，用mysql查询并且初始化一个List到redis中就好了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>first</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
